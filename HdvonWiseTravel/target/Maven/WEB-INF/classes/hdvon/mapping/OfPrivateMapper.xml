<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hdvon.dao.OfPrivateMapper" >
  <resultMap id="BaseResultMap" type="hdvon.model.OfPrivate" >
    <id column="username" property="username" jdbcType="VARCHAR" />
    <id column="name" property="name" jdbcType="VARCHAR" />
    <id column="namespace" property="namespace" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="hdvon.model.OfPrivate" extends="BaseResultMap" >
    <result column="privateData" property="privatedata" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    username, name, namespace
  </sql>
  <sql id="Blob_Column_List" >
    privateData
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="hdvon.model.OfPrivateKey" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ofprivate
    where username = #{username,jdbcType=VARCHAR}
      and name = #{name,jdbcType=VARCHAR}
      and namespace = #{namespace,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="hdvon.model.OfPrivateKey" >
    delete from ofprivate
    where username = #{username,jdbcType=VARCHAR}
      and name = #{name,jdbcType=VARCHAR}
      and namespace = #{namespace,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="hdvon.model.OfPrivate" >
    insert into ofprivate (username, name, namespace, 
      privateData)
    values (#{username,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{namespace,jdbcType=VARCHAR}, 
      #{privatedata,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="hdvon.model.OfPrivate" >
    insert into ofprivate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        username,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="namespace != null" >
        namespace,
      </if>
      <if test="privatedata != null" >
        privateData,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="namespace != null" >
        #{namespace,jdbcType=VARCHAR},
      </if>
      <if test="privatedata != null" >
        #{privatedata,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="hdvon.model.OfPrivate" >
    update ofprivate
    <set >
      <if test="privatedata != null" >
        privateData = #{privatedata,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where username = #{username,jdbcType=VARCHAR}
      and name = #{name,jdbcType=VARCHAR}
      and namespace = #{namespace,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="hdvon.model.OfPrivate" >
    update ofprivate
    set privateData = #{privatedata,jdbcType=LONGVARCHAR}
    where username = #{username,jdbcType=VARCHAR}
      and name = #{name,jdbcType=VARCHAR}
      and namespace = #{namespace,jdbcType=VARCHAR}
  </update>
</mapper>